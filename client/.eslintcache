[{"/Users/Gshow/Desktop/Project3/client/src/index.js":"1","/Users/Gshow/Desktop/Project3/client/src/layout.js":"2","/Users/Gshow/Desktop/Project3/client/src/xsound/AudioProvider.jsx":"3","/Users/Gshow/Desktop/Project3/client/src/pages/component/top/top.js":"4","/Users/Gshow/Desktop/Project3/client/src/xsound/AudioEventListener.js":"5","/Users/Gshow/Desktop/Project3/client/src/xsound/core/AudioService.js":"6","/Users/Gshow/Desktop/Project3/client/src/pages/analyze.js":"7","/Users/Gshow/Desktop/Project3/client/src/pages/detailedPage.js":"8","/Users/Gshow/Desktop/Project3/client/src/pages/landingPage.js":"9","/Users/Gshow/Desktop/Project3/client/src/pages/review.js":"10","/Users/Gshow/Desktop/Project3/client/src/pages/Listen.js":"11","/Users/Gshow/Desktop/Project3/client/src/xsound/SongLoader.js":"12","/Users/Gshow/Desktop/Project3/client/src/xsound/PlayProgress.js":"13","/Users/Gshow/Desktop/Project3/client/src/util/appIcons.js":"14","/Users/Gshow/Desktop/Project3/client/src/util/Constants.js":"15","/Users/Gshow/Desktop/Project3/client/src/xsound/analyzers/TimeOverviewAnalyzer.jsx":"16","/Users/Gshow/Desktop/Project3/client/src/xsound/analyzers/TimeAnalyze.jsx":"17","/Users/Gshow/Desktop/Project3/client/src/xsound/analyzers/FFTAnalyze.jsx":"18","/Users/Gshow/Desktop/Project3/client/src/xsound/TechniqueManager.js":"19","/Users/Gshow/Desktop/Project3/client/src/xsound/clips/ClipContainer.jsx":"20","/Users/Gshow/Desktop/Project3/client/src/xsound/clips/AudioClip.jsx":"21","/Users/Gshow/Desktop/Project3/client/src/pages/home.jsx":"22","/Users/Gshow/Desktop/Project3/client/src/pages/Authentication/Components/userContext.js":"23","/Users/Gshow/Desktop/Project3/client/src/pages/Authentication/Components/protectedRoute.js":"24","/Users/Gshow/Desktop/Project3/client/src/pages/Authentication/newUser.jsx":"25","/Users/Gshow/Desktop/Project3/client/src/pages/Authentication/existingUser.jsx":"26"},{"size":629,"mtime":1608107265006,"results":"27","hashOfConfig":"28"},{"size":1119,"mtime":1608107265006,"results":"29","hashOfConfig":"28"},{"size":618,"mtime":1608107265009,"results":"30","hashOfConfig":"28"},{"size":2766,"mtime":1608104188865,"results":"31","hashOfConfig":"28"},{"size":3943,"mtime":1608104188867,"results":"32","hashOfConfig":"28"},{"size":6183,"mtime":1608104188871,"results":"33","hashOfConfig":"28"},{"size":1429,"mtime":1608104188864,"results":"34","hashOfConfig":"28"},{"size":162,"mtime":1608104188865,"results":"35","hashOfConfig":"28"},{"size":397,"mtime":1608104188866,"results":"36","hashOfConfig":"28"},{"size":885,"mtime":1608104188866,"results":"37","hashOfConfig":"28"},{"size":411,"mtime":1608104188864,"results":"38","hashOfConfig":"28"},{"size":2142,"mtime":1608104188868,"results":"39","hashOfConfig":"28"},{"size":2322,"mtime":1608104188868,"results":"40","hashOfConfig":"28"},{"size":786,"mtime":1608104188866,"results":"41","hashOfConfig":"28"},{"size":299,"mtime":1608104188866,"results":"42","hashOfConfig":"28"},{"size":2467,"mtime":1608104188870,"results":"43","hashOfConfig":"28"},{"size":881,"mtime":1608104188869,"results":"44","hashOfConfig":"28"},{"size":832,"mtime":1608104188869,"results":"45","hashOfConfig":"28"},{"size":2117,"mtime":1608104188869,"results":"46","hashOfConfig":"28"},{"size":2325,"mtime":1608104188871,"results":"47","hashOfConfig":"28"},{"size":2600,"mtime":1608104188870,"results":"48","hashOfConfig":"28"},{"size":1033,"mtime":1608107265009,"results":"49","hashOfConfig":"28"},{"size":815,"mtime":1608107265007,"results":"50","hashOfConfig":"28"},{"size":571,"mtime":1608107265007,"results":"51","hashOfConfig":"28"},{"size":3899,"mtime":1608107265008,"results":"52","hashOfConfig":"28"},{"size":3537,"mtime":1608107265008,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"hqxc9m",{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"63"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"63"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"63"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"63"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"63"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"63"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"63"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"63"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"63"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"63"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/Gshow/Desktop/Project3/client/src/index.js",["119"],"/Users/Gshow/Desktop/Project3/client/src/layout.js",["120","121"],"/Users/Gshow/Desktop/Project3/client/src/xsound/AudioProvider.jsx",[],"/Users/Gshow/Desktop/Project3/client/src/pages/component/top/top.js",["122","123"],"import {Link} from \"react-router-dom\";\nimport {AnalysisIcon, HomeIcon, ListenIcon, LogoutIcon, ReviewIcon} from \"../../../util/appIcons\";\nimport {Nav, Navbar} from 'react-bootstrap'\nimport {SongLoader} from \"../../../xsound/SongLoader\";\nimport {PlayProgress} from \"../../../xsound/PlayProgress\"\nimport {FFTAnalyze} from \"../../../xsound/analyzers/FFTAnalyze\";\nimport {TimeAnalyze} from \"../../../xsound/analyzers/TimeAnalyze\";\nimport {TimeOverviewAnalyzer} from \"../../../xsound/analyzers/TimeOverviewAnalyzer\";\nimport {Fragment, useContext, useEffect, useState} from \"react\";\nimport {SoundXContext} from \"../../../xsound/AudioProvider\";\n\n// const apiUrl = \"http://localhost:3030\";\nconst apiUrl = \"\";\n\n\nconst Top = (props) => {\n    const {audioListener} = useContext(SoundXContext);\n    const [songs, setSongs] = useState(false);\n    const [progress, setProgress] = useState(false);\n    const [top, setsetTop] = useState(-300);\n\n    useEffect(() => {\n        audioListener.showTopNav=showTopNav;\n        return ()=>{\n            audioListener.showTopNav=null;\n        }\n    }, []);\n\n\n    const showTopNav=(songs,progress,timeOverView)=>{\n        setSongs(songs);\n        setProgress(progress);\n        const top=timeOverView?120:-300;\n        setsetTop(top);\n    };\n\n    const logout=()=>{\n        props.setUser(null);\n    }\n\n    return <div style={{height: 120,}}>\n\n\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"light\" variant=\"white\">\n            <Navbar.Brand href=\"/\">BaRs</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Link to=\"/\" className=\"nav-link\"><HomeIcon/>Home</Link>\n                    <Link to=\"/analyze\" className=\"nav-link\"><AnalysisIcon/>Analyze </Link>\n                    <Link to=\"/listen\" className=\"nav-link\"> <ListenIcon/> Listen</Link>\n                    <Link to=\"review\" className=\"nav-link\"><ReviewIcon/>Review </Link>\n\n                </Nav>\n                <Nav>\n\n                    <SongLoader apiUrl={apiUrl} show={songs}/>\n\n                </Nav>\n                <Nav>\n                    <LogoutIcon title={'Logout'} onClick={logout}/>\n                </Nav>\n\n            </Navbar.Collapse>\n        </Navbar>\n\n\n            <ul className=\"timefft\" style={{display:progress?\"\":\"none\"}}>\n                <li><FFTAnalyze key={1} w={80} h={50}/></li>\n                <li><PlayProgress/></li>\n                <li><TimeAnalyze key={2} w={80} h={50}/></li>\n            </ul>\n\n            <div style={{position:\"relative\",top:top,left:0}}>\n                <TimeOverviewAnalyzer apiUrl={\"\"} key={\"analyzer\"} w={800} h={100}/>\n            </div>\n\n\n    </div>\n\n}\n\nexport default Top;",["124","125"],"/Users/Gshow/Desktop/Project3/client/src/xsound/AudioEventListener.js",["126","127"],"import {TECHNIQUE_IMAGERY, TECHNIQUE_METAPHOR, TECHNIQUE_PUNCH_LINE} from \"../util/Constants\";\n\nconst filterClips=(clips,tech)=>{\n    return clips.filter((itm)=>{\n        return itm.techniqueType===tech;\n    });\n}\n\nclass AudioEventListener {\n\n    registeredClips = [];\n    audio;\n    currentClip;\n    timeOverviewRange;\n    techniqueGroups=[];\n    duration=0;\n\n    timeOverviewAnalyzer;\n    timeAnalyze;\n    fftAnalyze;\n    techniqueManager;\n    progressX;\n    showTopNav;\n    selectedSongId=-1;\n    songLoader;\n    reviewPage;\n    songList=[];\n    user;\n\n    constructor(audio) {\n        this.audio = audio;\n        audio.register(this);\n    }\n\n    registerClip = (clip) => {\n        this.registeredClips.push(clip);\n        console.log(`register: ${clip}`);\n        console.log(`size: ${this.registeredClips.length}`);\n    };\n\n    unregisterClip = (clip) => {\n        this.registeredClips =\n            this.registeredClips.filter((item) => item !== clip);\n        if (this.registeredClips.length<=0){\n            this.currentClip=undefined;\n        }\n        console.log(`unRegister: ${clip}`);\n        console.log(`size: ${this.registeredClips.length}`);\n\n    };\n\n    progress=(pos)=>{\n        if(this.currentClip){\n            this.currentClip.progress(pos)\n        }\n        if (this.progressX){\n            this.progressX.progress(pos)\n        }\n    }\n    stopAll=()=>{\n        this.registeredClips.forEach((clip)=>{\n            clip.stop()\n        });\n        if (this.progressX){\n            this.progressX.stop()\n        }\n    }\n    requestFocus=(id)=>{\n        this.stopAll()\n        this.currentClip=this.registeredClips.find((itm)=>itm.getId()===id);\n    }\n\n    loaded=(duration)=>{\n        if (this.timeAnalyze){\n            this.timeAnalyze.loaded(duration);\n        }\n        if (this.fftAnalyze){\n            this.fftAnalyze.loaded(duration);\n        }\n        if (this.progressX){\n            this.progressX.loaded(duration);\n        }\n        if (this.techniqueManager){\n            this.techniqueManager.loaded(duration)\n        }\n        if (this.timeOverviewAnalyzer){\n            this.timeOverviewAnalyzer.loaded(duration)\n        }\n        if (this.reviewPage){\n            this.reviewPage.loaded(duration,this.getCurrentSongInfo());\n        }\n    }\n\n\n    setTimeOverviewRange=(range)=>{\n        this.stopAll();\n        this.timeOverviewRange=range;\n        if (this.timeOverviewAnalyzer){\n            this.timeOverviewAnalyzer.setRange(range)\n        }\n\n    };\n\n    registerTechnique=(techniqueName,tech)=> {\n        this.techniqueGroups[techniqueName] = tech;\n    };\n\n    addClipToTechnique=(techniqueName)=>{\n        const tech=this.techniqueGroups[techniqueName];\n        if (tech){\n            tech.addClip();\n        }\n    };\n\n    resetTechniques=()=>{\n        for (const [key, tech] of Object.entries(this.techniqueGroups)) {\n            tech.clearClips()\n        }\n        this.timeOverviewRange=null;\n    }\n\n    loadCurrentSong=()=>{\n        this.songLoader.loadSong(this.selectedSongId)\n    }\n\n    getCurrentSongInfo=()=>{\n        return this.songList.find((itm)=>{\n            return `${itm.id}`===`${this.selectedSongId}`;\n        })\n    }\n\n    getClipList=()=>{\n        const allClips=[];\n        for (const [techName, tech] of Object.entries(this.techniqueGroups)) {\n            const {clipList}=tech.state;\n            const newList=clipList.map((itm)=>{\n                return {...itm,techniqueType:techName,songId:this.selectedSongId,userId:\"????\"}\n            });\n            allClips.push(...newList);\n        }\n        return allClips;\n    }\n\n    loadClipList=(userClips)=>{\n\n        [TECHNIQUE_METAPHOR,TECHNIQUE_IMAGERY,TECHNIQUE_PUNCH_LINE].forEach((tech)=>{\n            const filtered=userClips.filter((itm)=>{\n                return itm.techniqueType===tech;\n            });\n            this.techniqueGroups[tech].loadClips(filtered);\n        })\n\n\n    }\n\n\n\n}\n\nexport default AudioEventListener;","/Users/Gshow/Desktop/Project3/client/src/xsound/core/AudioService.js",["128"],"import {X} from \"xsound\";\n\nconst param={\n    interval: 'auto',\n    shape        : 'rect',\n    width: 1,\n    grid: 'none',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n    // wave: 'rgb(255,31,46)',\n    wave: 'rgb(25,48,255)',\n    // textinterval : 10\n};\n\nclass AudioService {\n\n    audioEventListener;\n\n    start = (pos) => {\n        X('audio').start(pos);\n    };\n\n    stop = () => {\n        X('audio').stop();\n    };\n\n    toggle = () => {\n        X('audio').toggle(X('audio').param('currentTime'));\n    };\n\n    jumpTo = (pos) => {\n        X('audio').param('currentTime', pos);    // The range of value is between 0 and audio duration\n    };\n\n    register=(listener)=>{\n      this.audioEventListener=listener;\n    }\n\n    playRange=(start,end)=>{\n\n        X('audio').start(start, end);\n    };\n\n    canPlay=()=>{\n        return X('audio').isSource();\n    };\n\n    sourcePlay=(start,end)=>{\n        const buffer = X('audio').sprite({ selected : [start, end] });\n        const context = X.get();\n        const source  = context.createBufferSource();\n\n        source.buffer = buffer.selected;\n\n        source.connect(context.destination);\n\n        source.start(0);\n\n    };\n    createTimeAnalyzer=(canvas)=>{\n        const analyzer = X('audio').module('analyser').domain('time');\n        analyzer.setup(canvas).state(true);\n        analyzer.param(param);\n        return analyzer;\n\n    }\n    createFftAnalyzer=(canvas)=>{\n        const analyzer = X('audio').module('analyser').domain('fft');\n        analyzer.setup(canvas).state(true);\n        analyzer.param(param);\n        return analyzer;\n    }\n\n    createOverviewAnalyzer=()=>{\n        return {\n            init: (canvas) => {\n\n                const analyzer = X('audio').module('analyser').domain(\"timeoverview\", 0);\n                // X('audio').param('loop', true);\n                analyzer.setup(canvas).state(true);\n\n                analyzer.param('mode', 'sprite');\n\n                analyzer.drag((event, startTime, endTime) => {\n                    const range={start: startTime, end: endTime};\n                    this.stop();\n                    // overView.setRange(range);\n                    this.audioEventListener.setTimeOverviewRange(range);\n\n                });\n                // new EventOverrides(analyzer, canvas);\n\n                analyzer.param(param);\n            }\n\n        };\n    };\n\n\n    createAnalyzer = () => {\n\n           const analyzer=this.createOverviewAnalyzer();\n            const key=`timeOverview-${new Date().getTime()}`;\n            return analyzer;\n\n    };\n\n    doLoad = (fileName, cb) => {\n\n        console.log(\"X('audio').start\");\n\n        X('audio').resize(16384);\n\n        X('audio').setup({\n            decode: (arrayBuffer) => {\n                // The 1st argument is the instance of `ArrayBuffer`\n                console.log('decode');\n                console.dir(arrayBuffer);\n            },\n            ready: (audioBuffer) => {\n                // The 1st argument is the instance of `AudioBuffer`\n                console.log('ready');\n                this.jumpTo(0);\n                this.audioEventListener.loaded(audioBuffer.duration)\n            },\n            start: (source, currentTime) => {\n                // The 1st argument is the instance of `AudioBufferSourceNode`\n                // The 2nd argument is current time (position) in the played audio\n                console.log('start');\n                console.dir(source);\n                console.dir(currentTime);\n            },\n            stop: (source, currentTime) => {\n                // The 1st argument is the instance of `AudioBufferSourceNode`\n                // The 2nd argument is current time (position) in the played audio\n                console.log('stop');\n                console.dir(source);\n                console.dir(currentTime);\n            },\n            update: (source, currentTime) => {\n                const index = Math.floor(currentTime * source.buffer.sampleRate)\n                const n100msec = 0.100 * source.buffer.sampleRate;\n\n                if ((index % n100msec) !== 0) {\n                    return;\n                }\n\n                // console.log('update');\n                // console.dir(source);\n                // console.dir(currentTime);\n                // cb.progress(currentTime);\n                if (this.ClipCb){\n                    this.ClipCb(currentTime)\n                }\n\n                this.audioEventListener.progress(currentTime);\n\n            },\n            ended: (source, currentTime) => {\n                // The 1st argument is the instance of `AudioBufferSourceNode`\n                // The 2nd argument is current time (position) in audio\n                console.log('ended');\n                console.dir(source);\n                console.dir(currentTime);\n\n                // cb.ended();\n            },\n            error: error => {\n                // The 1st argument is either `Error` or `null`\n                if (error instanceof Error) {\n                    window.alert(error.message);\n                } else {\n                    window.alert('Error : decodeAudioData');\n                }\n            }\n        });\n\n        // this.initAnalyser(canvas);\n        if (cb.createAnalyzers) {\n            cb.createAnalyzers();\n        }\n\n        X.ajax({\n            url: fileName,\n            timeout: 60000,\n            success: (event, arrayBuffer) => {\n                // The 1st argument is `XMLHttpRequestProgressEvent`\n                // The 2nd argument is `ArrayBuffer`[ArrayBuffer -> AudioBuffer]\n\n\n                    X('audio').ready.call(X('audio'), arrayBuffer);\n\n\n            },\n            error: (event, textStatus) => {\n                // The 1st argument is `XMLHttpRequestProgressEvent`\n                // The 2nd argument is either 'error' or 'timeout'\n\n                console.log('error');\n                console.dir(event);\n                console.dir(textStatus);\n            },\n            progress: (event) => {\n                // The 1st argument is `XMLHttpRequestProgressEvent`\n\n                console.log('progress');\n                console.dir(event);\n            }\n        });\n    }\n\n}\n\nexport default AudioService;","/Users/Gshow/Desktop/Project3/client/src/pages/analyze.js",["129"],"import {TechniqueManager} from \"../xsound/TechniqueManager\";\nimport {useContext, useEffect} from \"react\";\nimport {SoundXContext} from \"../xsound/AudioProvider\";\nimport Button from \"react-bootstrap/Button\";\n\nconst Analyze = () => {\n    const {audioListener} = useContext(SoundXContext);\n\n    useEffect(() => {\n        audioListener.showTopNav(true,false,true);\n        audioListener.stopAll();\n        audioListener.loadCurrentSong();\n\n\n    }, []);\n\n    const saveClips=()=>{\n        const allClips=audioListener.getClipList();\n        if (allClips && allClips.length>0) {\n            fetch(\"/audio/saveclips\", {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(allClips)\n            }).then((resp) => {\n                if (resp.ok) {\n                    return resp.json();\n                } else {\n                    alert(\"cannot save clips\")\n                }\n            }).then((data) => {\n                // console.log(data);\n            });\n        }else{\n            alert(\"There is no analysis made in this page\")\n        }\n\n    }\n\n    return <div>\n\n        {/*<TimeOverviewAnalyzer apiUrl={\"\"} key={\"analyzer\"} w={800} h={100} />*/}\n        <div style={{width:800,height:250}}/>\n        <TechniqueManager/>\n        <Button onClick={saveClips}>Save</Button>\n    </div>;\n}\n \nexport default Analyze;","/Users/Gshow/Desktop/Project3/client/src/pages/detailedPage.js",["130"],"import { Link } from \"react-router-dom\";\n\nconst DetailedPage = () => {\n    return <div>\n        DetailedPage\n        \n    </div>;\n}\n \nexport default DetailedPage;","/Users/Gshow/Desktop/Project3/client/src/pages/landingPage.js",["131"],"import {useContext, useEffect} from \"react\";\nimport {SoundXContext} from \"../xsound/AudioProvider\";\n\nconst LandingPage = () => {\n    const {audioListener} = useContext(SoundXContext);\n\n    useEffect(() => {\n\n            audioListener.showTopNav(false,false,false);\n            audioListener.stopAll();\n\n    }, []);\n\n    return <div>\n        Landing Page\n    </div>;\n}\n \nexport default LandingPage;","/Users/Gshow/Desktop/Project3/client/src/pages/review.js",["132"],"import {useContext, useEffect,useState} from \"react\";\nimport {SoundXContext} from \"../xsound/AudioProvider\";\n\nconst Review = () => {\n    const {audioListener} = useContext(SoundXContext);\n    const [currentSong, setCurrentSong] = useState(null);\n\n    useEffect(() => {\n        audioListener.reviewPage={loaded};\n        audioListener.showTopNav(true,false,false);\n        audioListener.loadCurrentSong();\n        audioListener.stopAll();\n        return ()=>{\n            audioListener.reviewPage=null\n        }\n\n    }, []);\n\n    const loaded = (duration, song) => {\n        console.log(`From Review ${duration}`,song);\n        setCurrentSong(song)\n    };\n\n    return <div>\n\n        <h3>Review Page</h3>\n        {currentSong &&\n            <>\n                {currentSong.title}<br/>\n                {currentSong.artists}\n            </>\n        }\n    </div>;\n}\n \nexport default Review;","/Users/Gshow/Desktop/Project3/client/src/pages/Listen.js",["133"],"import {useContext, useEffect} from \"react\";\nimport {SoundXContext} from \"../xsound/AudioProvider\";\n\nconst Listen = () => {\n    const {audioListener} = useContext(SoundXContext);\n\n    useEffect(() => {\n        audioListener.showTopNav(true, true,false);\n        audioListener.stopAll();\n        audioListener.loadCurrentSong();\n\n    }, []);\n    return <div>\n        Listen\n\n    </div>;\n}\n\nexport default Listen;","/Users/Gshow/Desktop/Project3/client/src/xsound/SongLoader.js",["134"],"\nimport React, {useContext, useEffect, useState} from 'react';\nimport {PlayListsIcon} from \"../util/appIcons\";\nimport {SoundXContext} from \"./AudioProvider\";\n\nexport function SongLoader(props) {\n    const {audio,audioListener} = useContext(SoundXContext);\n\n    const [songlist, setSonglist] = useState([]);\n    const [selectedSong, setSelectedSong] = useState(-1);\n    const {apiUrl,show}=props;\n\n    useEffect(() => {\n        audioListener.songLoader={loadSong};\n\n        const loadPlaylist = async () => {\n\n            try {\n                const resp = await fetch(`${apiUrl}/audio/playlist`);\n                if (resp.ok) {\n                    const songlist = await resp.json();\n                    setSonglist(songlist);\n                    if (songlist.length>0) {\n                        loadSong(songlist[0].id);\n                        audioListener.songList=songlist\n                    }\n                }\n            } catch (e) {\n                alert(`problem loading songs: \"${e.message}\"`)\n            }\n        };\n        loadPlaylist();\n\n    }, []);\n\n\n    const songSelected = (e) => {\n        loadSong(e.target.value)\n    };\n\n    const loadSong = (songId) => {\n        console.log(`songId ${songId}`);\n        if (audio){\n            audio.stop()\n        };\n        setSelectedSong(songId)\n        audioListener.selectedSongId=songId;\n        if (audioListener.timeOverviewAnalyzer.loadSong) {\n            audioListener.timeOverviewAnalyzer.loadSong(songId);\n        }\n    };\n\n    return (\n        <>\n            { show &&\n                <div style={{textAlign: \"left\", padding: 10}}>\n                    <PlayListsIcon/>\n                    <select onChange={songSelected} value={selectedSong}>\n                        {\n                            songlist.map((itm, idx) => {\n                                return <option key={idx} value={itm.id}>\n                                    {itm.title} {\"  ----  \"} [{itm.artists}]\n                                </option>\n                            })\n                        }\n\n                    </select>\n                </div>\n            }\n            </>\n    );\n};","/Users/Gshow/Desktop/Project3/client/src/xsound/PlayProgress.js",["135"],"import React, { Component, useState } from 'react';\nimport { AnimatePauseIcon, AnimatePlayIcon } from \"../util/appIcons\";\nimport { SoundXContext } from \"./AudioProvider\";\nimport { round } from \"./analyzers/TimeOverviewAnalyzer\";\n\nconst nbSpace =(n)=>{\n    let result = \"\";\n for (let index = 0; index < n; index++) {\n     result = result + \n     <span>&nbsp;</span>\n }\n    return  <span>&nbsp;</span> ;  \n} \nexport class PlayProgress extends Component {\n    static contextType = SoundXContext;\n\n    state = {\n        pos: 0,\n        playing: false,\n        max: 0,\n        show: false\n    };\n\n    // const [pos, setPos] = useState(0);\n    componentDidMount() {\n        this.context.audioListener.progressX = this;\n    }\n\n    componentWillUnmount() {\n        this.context.audioListener.progressX = null;\n    }\n\n    toggle = () => {\n        this.context.audio.toggle();\n        const playing = !this.state.playing;\n        this.setState({ playing });\n\n    };\n    stop = (pos) => {\n        this.context.audio.stop()\n    };\n\n    progress = (pos) => {\n        this.setState({ pos });\n    };\n\n    changed = (e) => {\n        const pos = e.target.value;\n        this.setState({ pos });\n        this.context.audio.jumpTo(pos);\n    };\n\n    loaded = (duration) => {\n        this.setState({ max: duration });\n        this.setState({ show: true })\n    }\n\n    render() {\n        const { max, pos, show, playing } = this.state;\n        const posMin = round(pos / 60, 2);\n        const endMin = round(max / 60, 2);\n        return (\n            <div>\n                {show &&\n                    <div>\n\n                        <span onClick={this.toggle}>\n                            {playing ? <AnimatePauseIcon /> : <AnimatePlayIcon />}\n                            {nbSpace(2)}\n                            <span style={{ fontSize: 12 }}>{posMin}</span>\n                            {nbSpace(2)}\n                            <input onChange={this.changed}\n                                type={\"range\"}\n                                min={0}\n                                max={max}\n                                value={pos}\n                                style={{ width: 700 }}\n                            /> {endMin}\n                        </span>\n                    </div>\n                }\n            </div>\n        );\n    }\n\n}\n\n","/Users/Gshow/Desktop/Project3/client/src/util/appIcons.js",[],"/Users/Gshow/Desktop/Project3/client/src/util/Constants.js",[],"/Users/Gshow/Desktop/Project3/client/src/xsound/analyzers/TimeOverviewAnalyzer.jsx",[],"/Users/Gshow/Desktop/Project3/client/src/xsound/analyzers/TimeAnalyze.jsx",[],"/Users/Gshow/Desktop/Project3/client/src/xsound/analyzers/FFTAnalyze.jsx",[],"/Users/Gshow/Desktop/Project3/client/src/xsound/TechniqueManager.js",["136"],"\nimport React, {useContext,useState,useEffect} from 'react';\nimport {ClipContainer} from \"./clips/ClipContainer\";\nimport {AddClipIcon} from \"../util/appIcons\";\nimport {SoundXContext} from \"./AudioProvider\";\nimport {containerBGs, TECHNIQUE_IMAGERY, TECHNIQUE_METAPHOR, TECHNIQUE_PUNCH_LINE} from \"../util/Constants\";\n\n\n\nexport const TechniqueManager=(props) =>{\n    const [show, setShow] = useState(false);\n    const { audioListener} = useContext(SoundXContext);\n\n    useEffect(() => {\n        audioListener.techniqueManager={loaded};\n        return () => {\n            audioListener.techniqueManager=null;\n        };\n    }, []);\n\n    const loaded=()=>{\n        setShow(true)\n        const songId=audioListener.selectedSongId;\n        const userId=audioListener.user.userId;\n\n        fetch(`/audio/loadclips/${userId}/${songId}`).then((resp)=>{\n            if (resp.ok){\n                return resp.json();\n            }else{\n                alert(\"Cannot load User clip list\")\n            }\n        }).then((data)=>{\n\n            audioListener.loadClipList(data);\n\n        })\n    }\n    const addClip = (technique) => {\n        audioListener.addClipToTechnique(technique)\n    };\n    const AddClipButton = (props) => {\n        const {technique}=props;\n        return <li\n            onClick={() => addClip(technique)}\n            style={{background: containerBGs[technique],cursor:\"pointer\"}}>\n            <span><AddClipIcon/> Add to {technique}</span>\n        </li>\n    }\n    return (\n        <div>\n            { show &&\n                <div>\n                <ul className={\"technique\"}>\n                    <AddClipButton key={1} technique={TECHNIQUE_METAPHOR}/>\n                    <AddClipButton key={2} technique={TECHNIQUE_PUNCH_LINE}/>\n                    <AddClipButton key={3} technique={TECHNIQUE_IMAGERY}/>\n                </ul>\n                < ClipContainer technique={TECHNIQUE_METAPHOR} max={4}/>\n                <ClipContainer technique={TECHNIQUE_PUNCH_LINE} max={2}/>\n                <ClipContainer technique={TECHNIQUE_IMAGERY} max={3}/>\n                </div>\n            }\n        </div>\n    );\n};","/Users/Gshow/Desktop/Project3/client/src/xsound/clips/ClipContainer.jsx",[],"/Users/Gshow/Desktop/Project3/client/src/xsound/clips/AudioClip.jsx",["137"],"import React, {Component} from 'react';\nimport _ from 'lodash'\nimport {AnimatePauseIcon, AnimatePlayIcon, DeleteClipIcon} from \"../../util/appIcons\";\nimport {SoundXContext} from \"../AudioProvider\";\n\nexport class AudioClip extends Component {\n    static contextType = SoundXContext;\n\n    state = {\n        playing: false,\n        posValue: 0,\n        id:this.props.id,\n        start:this.props.start,\n        end:this.props.end,\n        currentPos:this.props.start,\n    };\n    componentDidMount() {\n        this.context.audioListener.registerClip(this);\n    }\n    componentWillUnmount() {\n        this.stop();\n        this.context.audioListener.unregisterClip(this);\n    }\n\n    deleteClip=()=>{\n        this.props.onDelete(this.props.id);\n    }\n\n    progress=(pos)=>{\n        const {audio}=this.context;\n        const {start,end,currentPos}=this.state;\n        const posValue=pos - Math.floor(start);\n        this.setState({posValue,\n            currentPos:pos\n        });\n        if (pos >= end) {\n            this.setState({posValue:0});\n            audio.jumpTo(start)\n        }\n    };\n\n    stop=()=>{\n        if (this.state.playing) {\n            this.setState({playing: false});\n            const {audio} = this.context;\n            audio.stop();\n        }\n    }\n\n    toggle = () => {\n        const {audio}=this.context;\n        const {id,playing,currentPos}=this.state;\n        if (!playing){\n            this.context.audioListener.requestFocus(id);\n            audio.jumpTo(currentPos)\n        }\n        audio.toggle();\n        this.setState({playing:!playing});\n\n    };\n\n    getId=()=>{\n        return this.state.id;\n    };\n\n    render() {\n\n        const {playing,posValue,start,end}=this.state;\n        const playMap = _.range(Math.floor(start), Math.floor(end) + 1);\n        const max = playMap.length;\n        const w = 100;//max * 11;\n\n\n        const changed = (e) => {\n            // props.changed(e.target.value);\n            console.log(e.target.value);\n        }\n\n\n\n        return (\n            <div className={\"audio-clip\"} style={{width:w}}>\n                <span><span onClick={this.toggle}>{playing ? <AnimatePauseIcon /> : <AnimatePlayIcon />}</span>\n                <input onChange={changed}\n                       type={\"range\"}\n                       min={0}\n                       max={max}\n                       value={posValue}\n                       style={{width: \"60%\"}}\n                />\n                <DeleteClipIcon onClick={this.deleteClip}/>\n                </span>\n            </div>\n        );\n    }\n    toString=()=>{\n\n        return this.getId();\n    };\n\n\n};","/Users/Gshow/Desktop/Project3/client/src/pages/home.jsx",[],"/Users/Gshow/Desktop/Project3/client/src/pages/Authentication/Components/userContext.js",["138"],"/Users/Gshow/Desktop/Project3/client/src/pages/Authentication/Components/protectedRoute.js",["139"],"/Users/Gshow/Desktop/Project3/client/src/pages/Authentication/newUser.jsx",["140","141"],"/Users/Gshow/Desktop/Project3/client/src/pages/Authentication/existingUser.jsx",["142","143","144"],{"ruleId":"145","severity":1,"message":"146","line":4,"column":8,"nodeType":"147","messageId":"148","endLine":4,"endColumn":12},{"ruleId":"145","severity":1,"message":"149","line":2,"column":35,"nodeType":"147","messageId":"148","endLine":2,"endColumn":39},{"ruleId":"145","severity":1,"message":"150","line":8,"column":8,"nodeType":"147","messageId":"148","endLine":8,"endColumn":21},{"ruleId":"145","severity":1,"message":"151","line":9,"column":9,"nodeType":"147","messageId":"148","endLine":9,"endColumn":17},{"ruleId":"152","severity":1,"message":"153","line":27,"column":8,"nodeType":"154","endLine":27,"endColumn":10,"suggestions":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"145","severity":1,"message":"160","line":3,"column":7,"nodeType":"147","messageId":"148","endLine":3,"endColumn":18},{"ruleId":"145","severity":1,"message":"161","line":116,"column":21,"nodeType":"147","messageId":"148","endLine":116,"endColumn":24},{"ruleId":"145","severity":1,"message":"161","line":105,"column":19,"nodeType":"147","messageId":"148","endLine":105,"endColumn":22},{"ruleId":"152","severity":1,"message":"153","line":15,"column":8,"nodeType":"154","endLine":15,"endColumn":10,"suggestions":"162"},{"ruleId":"145","severity":1,"message":"149","line":1,"column":10,"nodeType":"147","messageId":"148","endLine":1,"endColumn":14},{"ruleId":"152","severity":1,"message":"153","line":12,"column":8,"nodeType":"154","endLine":12,"endColumn":10,"suggestions":"163"},{"ruleId":"152","severity":1,"message":"153","line":17,"column":8,"nodeType":"154","endLine":17,"endColumn":10,"suggestions":"164"},{"ruleId":"152","severity":1,"message":"153","line":12,"column":8,"nodeType":"154","endLine":12,"endColumn":10,"suggestions":"165"},{"ruleId":"152","severity":1,"message":"166","line":34,"column":8,"nodeType":"154","endLine":34,"endColumn":10,"suggestions":"167"},{"ruleId":"145","severity":1,"message":"168","line":1,"column":28,"nodeType":"147","messageId":"148","endLine":1,"endColumn":36},{"ruleId":"152","severity":1,"message":"169","line":19,"column":8,"nodeType":"154","endLine":19,"endColumn":10,"suggestions":"170"},{"ruleId":"145","severity":1,"message":"171","line":31,"column":26,"nodeType":"147","messageId":"148","endLine":31,"endColumn":36},{"ruleId":"172","severity":1,"message":"173","line":5,"column":30,"nodeType":"174","messageId":"175","endLine":11,"endColumn":10},{"ruleId":"145","severity":1,"message":"176","line":6,"column":16,"nodeType":"147","messageId":"148","endLine":6,"endColumn":24},{"ruleId":"145","severity":1,"message":"177","line":11,"column":11,"nodeType":"147","messageId":"148","endLine":11,"endColumn":20},{"ruleId":"145","severity":1,"message":"178","line":12,"column":11,"nodeType":"147","messageId":"148","endLine":12,"endColumn":19},{"ruleId":"145","severity":1,"message":"179","line":12,"column":12,"nodeType":"147","messageId":"148","endLine":12,"endColumn":16},{"ruleId":"180","severity":1,"message":"181","line":30,"column":50,"nodeType":"182","messageId":"183","endLine":30,"endColumn":52},{"ruleId":"180","severity":1,"message":"181","line":30,"column":67,"nodeType":"182","messageId":"183","endLine":30,"endColumn":69},"no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'AudioProvider' is defined but never used.","'Fragment' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'audioListener'. Either include it or remove the dependency array.","ArrayExpression",["184"],"no-native-reassign",["185"],"no-negated-in-lhs",["186"],"'filterClips' is assigned a value but never used.","'key' is assigned a value but never used.",["187"],["188"],["189"],["190"],"React Hook useEffect has missing dependencies: 'apiUrl', 'audioListener', and 'loadSong'. Either include them or remove the dependency array.",["191"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'audioListener' and 'loaded'. Either include them or remove the dependency array.",["192"],"'currentPos' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'dispatch' is assigned a value but never used.","'firstName' is assigned a value but never used.","'lastName' is assigned a value but never used.","'user' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"desc":"193","fix":"194"},"no-global-assign","no-unsafe-negation",{"desc":"193","fix":"195"},{"desc":"193","fix":"196"},{"desc":"193","fix":"197"},{"desc":"193","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},"Update the dependencies array to be: [audioListener]",{"range":"203","text":"204"},{"range":"205","text":"204"},{"range":"206","text":"204"},{"range":"207","text":"204"},{"range":"208","text":"204"},"Update the dependencies array to be: [apiUrl, audioListener, loadSong]",{"range":"209","text":"210"},"Update the dependencies array to be: [audioListener, loaded]",{"range":"211","text":"212"},[1077,1079],"[audioListener]",[443,445],[310,312],[519,521],[336,338],[1064,1066],"[apiUrl, audioListener, loadSong]",[624,626],"[audioListener, loaded]"]