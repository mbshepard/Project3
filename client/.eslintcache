[{"/Users/Gshow/Desktop/Project3/client/src/index.js":"1","/Users/Gshow/Desktop/Project3/client/src/layout.js":"2","/Users/Gshow/Desktop/Project3/client/src/xsound/AudioProvider.jsx":"3","/Users/Gshow/Desktop/Project3/client/src/pages/home.jsx":"4","/Users/Gshow/Desktop/Project3/client/src/pages/Authentication/Components/userContext.js":"5","/Users/Gshow/Desktop/Project3/client/src/pages/Authentication/Components/protectedRoute.js":"6","/Users/Gshow/Desktop/Project3/client/src/pages/Authentication/newUser.jsx":"7","/Users/Gshow/Desktop/Project3/client/src/xsound/AudioEventListener.js":"8","/Users/Gshow/Desktop/Project3/client/src/pages/detailedPage.js":"9","/Users/Gshow/Desktop/Project3/client/src/pages/analyze.js":"10","/Users/Gshow/Desktop/Project3/client/src/pages/Listen.js":"11","/Users/Gshow/Desktop/Project3/client/src/pages/review.js":"12","/Users/Gshow/Desktop/Project3/client/src/xsound/core/AudioService.js":"13","/Users/Gshow/Desktop/Project3/client/src/pages/component/top/top.js":"14","/Users/Gshow/Desktop/Project3/client/src/pages/Authentication/existingUser.jsx":"15","/Users/Gshow/Desktop/Project3/client/src/xsound/TechniqueManager.js":"16","/Users/Gshow/Desktop/Project3/client/src/util/Constants.js":"17","/Users/Gshow/Desktop/Project3/client/src/util/appIcons.js":"18","/Users/Gshow/Desktop/Project3/client/src/xsound/SongLoader.js":"19","/Users/Gshow/Desktop/Project3/client/src/xsound/PlayProgress.js":"20","/Users/Gshow/Desktop/Project3/client/src/xsound/analyzers/FFTAnalyze.jsx":"21","/Users/Gshow/Desktop/Project3/client/src/xsound/analyzers/TimeAnalyze.jsx":"22","/Users/Gshow/Desktop/Project3/client/src/xsound/analyzers/TimeOverviewAnalyzer.jsx":"23","/Users/Gshow/Desktop/Project3/client/src/xsound/clips/ClipContainer.jsx":"24","/Users/Gshow/Desktop/Project3/client/src/xsound/clips/AudioClip.jsx":"25","/Users/Gshow/Desktop/Project3/client/src/pages/listenAnimations.js":"26","/Users/Gshow/Desktop/Project3/client/src/pages/component/footer/footer.js":"27","/Users/Gshow/Desktop/Project3/client/src/pages/landingPage.js":"28"},{"size":631,"mtime":1608144051615,"results":"29","hashOfConfig":"30"},{"size":1465,"mtime":1608144051616,"results":"31","hashOfConfig":"30"},{"size":597,"mtime":1608108469921,"results":"32","hashOfConfig":"30"},{"size":1145,"mtime":1608257154382,"results":"33","hashOfConfig":"30"},{"size":815,"mtime":1608144051617,"results":"34","hashOfConfig":"30"},{"size":571,"mtime":1608144051617,"results":"35","hashOfConfig":"30"},{"size":3899,"mtime":1608144051619,"results":"36","hashOfConfig":"30"},{"size":3926,"mtime":1608152359804,"results":"37","hashOfConfig":"30"},{"size":162,"mtime":1608104188865,"results":"38","hashOfConfig":"30"},{"size":2282,"mtime":1608247838926,"results":"39","hashOfConfig":"30"},{"size":493,"mtime":1608195831931,"results":"40","hashOfConfig":"30"},{"size":4132,"mtime":1608189445015,"results":"41","hashOfConfig":"30"},{"size":6183,"mtime":1608108469938,"results":"42","hashOfConfig":"30"},{"size":3214,"mtime":1608247838928,"results":"43","hashOfConfig":"30"},{"size":4050,"mtime":1608147494596,"results":"44","hashOfConfig":"30"},{"size":3447,"mtime":1608247838933,"results":"45","hashOfConfig":"30"},{"size":483,"mtime":1608162744354,"results":"46","hashOfConfig":"30"},{"size":809,"mtime":1608144051623,"results":"47","hashOfConfig":"30"},{"size":2142,"mtime":1608108469926,"results":"48","hashOfConfig":"30"},{"size":2187,"mtime":1608162835325,"results":"49","hashOfConfig":"30"},{"size":832,"mtime":1608108469930,"results":"50","hashOfConfig":"30"},{"size":881,"mtime":1608108469931,"results":"51","hashOfConfig":"30"},{"size":2527,"mtime":1608247838934,"results":"52","hashOfConfig":"30"},{"size":2665,"mtime":1608247838938,"results":"53","hashOfConfig":"30"},{"size":3027,"mtime":1608152274508,"results":"54","hashOfConfig":"30"},{"size":200,"mtime":1608198002102,"results":"55","hashOfConfig":"30"},{"size":401,"mtime":1608247838927,"results":"56","hashOfConfig":"30"},{"size":397,"mtime":1608257162802,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},"hqxc9m",{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"61"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"61"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"61"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"61"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"61"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"61"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"61"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"61"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"61"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"61"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"61"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"61"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"61"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"61"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"61"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"123","usedDeprecatedRules":"61"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":4,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/Gshow/Desktop/Project3/client/src/index.js",["133"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Layout from './layout';\nimport Home from './pages/home';\nimport './index.css';\nimport {AudioProvider} from './xsound/AudioProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AudioProvider>    \n      <Layout />\n    </AudioProvider>\n  </React.StrictMode>, document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",["134","135"],"/Users/Gshow/Desktop/Project3/client/src/layout.js",["136","137","138"],"import React, {useEffect, useState} from \"react\";\nimport { BrowserRouter as Router, Link, Route, Switch} from 'react-router-dom';\nimport Home from './pages/home';\nimport NewUser from './pages/Authentication/newUser';\nimport ExistingUser from './pages/Authentication/existingUser';\nimport PrivateRoute from './pages/Authentication/Components/protectedRoute';\nimport { UserProvider } from './pages/Authentication/Components/userContext';\nimport AudioProvider from './xsound/AudioProvider';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction Layout() {\n    const [user, setUser] = useState(null);\n    useEffect(() => {\n        //Todo Here we check the user context to know if a user had previously log in\n        // setUser(user from context); // This method will be called to set the\n        // user if it exist in the context\n    }, []);\n    return(\n        <Router>\n            <UserProvider>\n                <div>\n                    <Switch>\n                        <PrivateRoute path='/home'>\n                            <Home setUser={setUser}/>\n                        </PrivateRoute>\n                        <Route exact path=\"/NewUser\" component={NewUser} />\n                        <Route exact path=\"/\" component={(props) => <ExistingUser {...props} setUser={setUser} />} />\n                    </Switch>\n                </div>\n            </UserProvider>\n        </Router>\n    );\n};\n\nexport default Layout;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","/Users/Gshow/Desktop/Project3/client/src/xsound/AudioProvider.jsx",[],"/Users/Gshow/Desktop/Project3/client/src/pages/home.jsx",[],"/Users/Gshow/Desktop/Project3/client/src/pages/Authentication/Components/userContext.js",["139"],"import React, { createContext, useContext, useReducer } from 'react';\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'loggedInUser': {\n            return {\n                ...state,\n                ...action.payload,\n                loggedIn: true,\n            };\n        };\n        case 'initialState': \n            return {\n                ...action.payload,\n            };\n        default:\n            return state\n    };\n};\n\nconst UserContext = createContext(null);\nconst { Provider } = UserContext;\n\nconst UserProvider = ({ value, ...props }) => {\n    const [state, dispatch] = useReducer(reducer, { loggedIn: false })\n    return <Provider value={[state, dispatch]} {...props} />\n};\n\nconst UseUserContext = () => useContext(UserContext);\n\nexport { UserProvider, UseUserContext };","/Users/Gshow/Desktop/Project3/client/src/pages/Authentication/Components/protectedRoute.js",["140"],"import React from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport { UseUserContext } from '../Components/userContext'\n\nfunction PrivateRoute({ children, ...rest }) {\n  const [user, dispatch] = UseUserContext()\n  console.log(user)\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        user.loggedIn ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: '/',\n              state: { from: location },\n            }}\n          />\n        )\n      }\n    />\n  )\n}\nexport default PrivateRoute","/Users/Gshow/Desktop/Project3/client/src/pages/Authentication/newUser.jsx",["141","142"],"import React, { useRef }from 'react';\nimport { Form, Row, Col, Button } from 'react-bootstrap';\nimport { NavLink, Link } from \"react-router-dom\";\nimport \"./style.css\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst NewUser = () => {\n\n    const username = useRef();\n    const password = useRef();\n    const firstName = useRef();\n    const lastName = useRef();\n\n    const createUser = () => {\n        let inputObj = {\n            email: username.current.value,\n            password: password.current.value,\n        }\n        fetch('/auth/createuser', {\n            method: 'POST',\n            headers: {\n                Accept: \"application/json, text/plain, */*\",\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(inputObj),\n        })\n    }\n    return (\n        <div className=\"backgroundPic\">\n            <div id=\"title\"></div> \n            <div className=\"auth-body\">\n                <div className=\"pForm\">\n                    <div id=\"form-background\"></div>\n                    <div id=\"form\">\n                        <Form md={{ span: 6, offset: 3 }}>\n                            {/* <Row>\n                                <Col md={{ span: 4, offset: 4 }}>\n                                    <Form.Group controlId=\"formBasicEmail\">\n                                        <Form.Label>Full Name</Form.Label>\n                                        <Form.Control ref={firstName} type=\"email\" placeholder=\"First Name\" />\n                                    </Form.Group>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md={{ span: 4, offset: 4 }}>\n                                    <Form.Group controlId=\"formBasicEmail\">\n                                        <Form.Control ref={lastName} type=\"email\" placeholder=\"Last Name\" />\n                                    </Form.Group>\n                                </Col>\n                            </Row> */}\n                            <Row>\n                                <Col md={{ span: 4, offset: 4 }}>\n                                    <Form.Group controlId=\"formBasicEmail\">\n                                        <Form.Label>Authentication</Form.Label>\n                                        <Form.Control ref={username} type=\"email\" placeholder=\"login@email.com\" />\n                                        <Form.Text className=\"text-muted\">\n                                            We'll never share your email with anyone else.\n                                        </Form.Text>\n                                    </Form.Group>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md={{ span: 4, offset: 4 }}>\n                                    <Form.Group controlId=\"formBasicEmail\">\n                                        <Form.Control ref={password} type=\"email\" placeholder=\"Password\" />\n                                    </Form.Group>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md={{ span: 4, offset: 4 }}>\n                                    <Button onClick={createUser} > Create New User</Button>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col md={{ span: 4, offset: 4 }}>\n                                    <NavLink exact to=\"/\" activeClassName=\"active\"> Already a User? </NavLink>\n                                </Col>\n                            </Row>\n                        </Form>  \n                    </div>\n                </div>\n                <Link to=\"/home\"> Home </Link>\n            </div>\n        </div>\n    );\n}\n\nexport default NewUser;\n\n\n\n\n\n\n\n\n\n\n\n","/Users/Gshow/Desktop/Project3/client/src/xsound/AudioEventListener.js",["143"],"import {TECHNIQUE_IMAGERY, TECHNIQUE_METAPHOR, TECHNIQUE_PUNCH_LINE} from \"../util/Constants\";\n\nclass AudioEventListener {\n\n    registeredClips = [];\n    audio;\n    currentClip;\n    timeOverviewRange;\n    techniqueGroups=[];\n    duration=0;\n\n    timeOverviewAnalyzer;\n    timeAnalyze;\n    fftAnalyze;\n    techniqueManager;\n    progressX;\n    showTopNav;\n    selectedSongId=-1;\n    songLoader;\n    reviewPage;\n    songList=[];\n    user;\n\n    constructor(audio) {\n        this.audio = audio;\n        audio.register(this);\n    }\n\n    registerClip = (clip) => {\n        this.registeredClips.push(clip);\n        console.log(`register: ${clip}`);\n        console.log(`size: ${this.registeredClips.length}`);\n    };\n\n    unregisterClip = (clip) => {\n        this.registeredClips =\n            this.registeredClips.filter((item) => item !== clip);\n        if (this.registeredClips.length<=0){\n            this.currentClip=undefined;\n        }\n        console.log(`unRegister: ${clip}`);\n        console.log(`size: ${this.registeredClips.length}`);\n\n    };\n\n    progress=(pos)=>{\n        if(this.currentClip){\n            this.currentClip.progress(pos)\n        }\n        if (this.progressX){\n            this.progressX.progress(pos)\n        }\n    }\n    stopAll=()=>{\n        this.registeredClips.forEach((clip)=>{\n            clip.stop()\n        });\n        if (this.progressX){\n            this.progressX.stop()\n        }\n    }\n    requestFocus=( clipNum)=>{\n        this.stopAll()\n        this.currentClip=this.registeredClips.find((itm)=>itm.getId()=== clipNum);\n    }\n\n    loaded=(duration)=>{\n        if (this.timeAnalyze){\n            this.timeAnalyze.loaded(duration);\n        }\n        if (this.fftAnalyze){\n            this.fftAnalyze.loaded(duration);\n        }\n        if (this.progressX){\n            this.progressX.loaded(duration);\n        }\n        if (this.techniqueManager){\n            this.techniqueManager.loaded(duration)\n        }\n        if (this.timeOverviewAnalyzer){\n            this.timeOverviewAnalyzer.loaded(duration)\n        }\n        if (this.reviewPage){\n            this.reviewPage.loaded(duration,this.getCurrentSongInfo());\n        }\n    }\n\n\n    setTimeOverviewRange=(range)=>{\n        this.stopAll();\n        this.timeOverviewRange=range;\n        if (this.timeOverviewAnalyzer){\n            this.timeOverviewAnalyzer.setRange(range)\n        }\n\n    };\n\n    registerTechnique=(techniqueName,tech)=> {\n        this.techniqueGroups[techniqueName] = tech;\n    };\n\n    addClipToTechnique=(techniqueName)=>{\n        const tech=this.techniqueGroups[techniqueName];\n        if (tech){\n            tech.addClip();\n        }\n    };\n\n    resetTechniques=()=>{\n        for (const [key, tech] of Object.entries(this.techniqueGroups)) {\n            tech.clearClips()\n        }\n        this.timeOverviewRange=null;\n    }\n\n    loadCurrentSong=()=>{\n        this.songLoader.loadSong(this.selectedSongId)\n    }\n\n    getCurrentSongInfo=()=>{\n        return this.songList.find((itm)=>{\n            return `${itm.id}`===`${this.selectedSongId}`;\n        })\n    }\n\n    getClipList=()=>{\n        const allClips=[];\n        for (const [techName, tech] of Object.entries(this.techniqueGroups)) {\n            const {clipList}=tech.state;\n            const newList=clipList.map((itm)=>{\n                return {...itm,\n                    techniqueType:techName,\n                    songId:this.selectedSongId,\n                    userId:this.user.userId\n                }\n            });\n            allClips.push(...newList);\n        }\n        return allClips;\n    }\n\n    loadClipList=(userClips)=>{\n\n        [TECHNIQUE_METAPHOR,TECHNIQUE_IMAGERY,TECHNIQUE_PUNCH_LINE].forEach((tech)=>{\n            const filtered=userClips.filter((itm)=>{\n                return itm.techniqueType===tech;\n            });\n            this.techniqueGroups[tech].loadClips(filtered);\n        })\n\n\n    }\n\n\n\n}\n\nexport default AudioEventListener;","/Users/Gshow/Desktop/Project3/client/src/pages/detailedPage.js",["144"],"import { Link } from \"react-router-dom\";\n\nconst DetailedPage = () => {\n    return <div>\n        DetailedPage\n        \n    </div>;\n}\n \nexport default DetailedPage;","/Users/Gshow/Desktop/Project3/client/src/pages/analyze.js",["145","146","147"],"import {TechniqueManager} from \"../xsound/TechniqueManager\";\nimport {useContext, useEffect} from \"react\";\nimport {SoundXContext} from \"../xsound/AudioProvider\";\nimport Button from \"react-bootstrap/Button\";\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nconst Analyze = () => {\n    const {audioListener} = useContext(SoundXContext);\n\n    useEffect(() => {\n        audioListener.showTopNav(true,false,true);\n        audioListener.stopAll();\n        audioListener.loadCurrentSong();\n\n\n    }, []);\n    const clearClips =()=>{\n        audioListener.resetTechniques();\n    }\n\n    const saveClips=()=>{\n        const allClips=audioListener.getClipList();\n        const {userId} = audioListener.user;\n        const songId = audioListener.selectedSongId;\n            fetch(`/audio/saveclips/${userId}/${songId}`, {\n                method: \"POST\",\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(allClips)\n            }).then((resp) => {\n                if (resp.ok) {\n                    return resp.json();\n                } else {\n                    alert(\"cannot save clips\")\n                }\n            }).then((data) => {\n                // console.log(data);\n            });\n        // }else{\n        //     alert(\"There is no analysis made in this page\")\n        // }\n\n    }\n\n    return <div>\n        <Container fluid style={{backgroundColor: \"darkgrey\"}}>\n            <Row style={{marginBottom: \"25px\"}}>\n                <div style={{width:'100%',height:250, backgroundColor: \"rgb(38, 50, 56)\"}}/>\n            </Row>\n            \n            <TechniqueManager/>\n            \n            <Row>\n                <div style={{\n                    width:\"100%\",\n                    marginTop:50,\n                    backgroundColor: \"rgb(38, 50, 56)\",\n                    boxShadow: \"10px 20px 30px\"\n                }}>\n                    <Button variant=\"success\" onClick={saveClips} style={{margin: \"25px\"}}>Save</Button>\n                    <Button  variant=\"danger\" style={{margin: \"25px\"}}>Clear</Button>\n                </div>\n            </Row>\n        </Container>\n    </div>;\n}\n \nexport default Analyze;","/Users/Gshow/Desktop/Project3/client/src/pages/Listen.js",["148"],"import {useContext, useEffect} from \"react\";\nimport {SoundXContext} from \"../xsound/AudioProvider\";\nimport ListenAnimations from \"./listenAnimations\";\n\nconst Listen = () => {\n    const {audioListener} = useContext(SoundXContext);\n\n    useEffect(() => {\n        audioListener.showTopNav(true, true,false);\n        audioListener.stopAll();\n        audioListener.loadCurrentSong();\n\n    }, []);\n    return <div>\n        Listen\n        <ListenAnimations/>\n\n    </div>;\n}\n\nexport default Listen;\n\n\n","/Users/Gshow/Desktop/Project3/client/src/pages/review.js",["149"],"import {useContext, useEffect,useState} from \"react\";\nimport {SoundXContext} from \"../xsound/AudioProvider\";\nimport {Table} from \"react-bootstrap\";\nimport {SendIcon} from \"../util/appIcons\"\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\n\nconst {Footer,Title,Header,Body}=Modal;\n\n// const users=[\n//     {firstName:\"MMFirst\",lastName:\"LastAA\", metaphorAvg:8,punchLineAvg:3,imageryAvg:6},\n//     {firstName:\"BBFirst\",lastName:\"LastBB\", metaphorAvg:8,punchLineAvg:3,imageryAvg:6},\n//     {firstName:\"BBFirst\",lastName:\"LastCC\", metaphorAvg:8,punchLineAvg:3,imageryAvg:6},\n// ];\n\nconst Review = () => {\n    const {audioListener} = useContext(SoundXContext);\n    const [currentSong, setCurrentSong] = useState(null);\n    const [selectedUser, setSelectedUser] = useState(-1);\n    const [users, setUsers] = useState([]);\n\n    const [showDetail, setShowDetail] = useState(false);\n\n    const handleCloseDetail = () => setShowDetail(false);\n    const handleShowDetail = (user) => {\n        setShowDetail(true);\n        setSelectedUser(user);\n    }\n\n    useEffect(() => {\n        audioListener.reviewPage={loaded};\n        audioListener.showTopNav(true,false,false);\n        audioListener.loadCurrentSong();\n        audioListener.stopAll();\n        return ()=>{\n            audioListener.reviewPage=null\n        }\n\n    }, []);\n\n    const loaded = (duration, song) => {\n        console.log(`From Review ${duration}`,song);\n        setCurrentSong(song);\n        fetch(`/audio/review/${song.id}`).then((resp)=>{\n            if(resp.ok){\n                return resp.json();\n            }else{\n                alert(\"Cannot load reviews\")\n            }\n        }).then((data)=>{\n            setUsers(data)\n        })\n\n    };\n    let fullName='';\n    if(selectedUser>-1){\n        fullName=`${users[selectedUser].firstName} ${users[selectedUser].lastName}`\n    }\n    return <div>\n\n        <h3>Review Page</h3>\n        {currentSong &&\n            <>\n                {currentSong.title}<br/>\n                {currentSong.artists}\n                <br/>\n\n                <div style={{padding:30}}>\n                    <Table striped bordered hover >\n                        <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>User Id</th>\n                            <th>Metaphor (Avg)</th>\n                            <th>Punch Line (Avg)</th>\n                            <th>Imagery (Avg)</th>\n                            <th>Detail</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {\n                            users.map((aUser,idx) => {\n                                return <tr key={idx}>\n                                    <td>{idx+1}</td>\n                                    <td>{aUser.user}</td>\n                                    <td>{aUser.MetaphorAvg}</td>\n                                    <td>{aUser.Punch_lineAvg}</td>\n                                    <td>{aUser.ImageryAvg}</td>\n                                    <td><SendIcon onClick={()=>handleShowDetail(idx)}\n                                        style={{background:\"transparent\",color:\"green\"}}\n                                        size={25}/>\n                                    </td>\n                                </tr>\n                            })\n                        }\n                        </tbody>\n                    </Table>\n                </div>\n\n            </>\n        }\n        <Modal\n            show={showDetail}\n            onHide={handleCloseDetail}\n            backdrop=\"static\"\n            keyboard={false}\n            size=\"xl\"\n            centered={true}\n        >\n            <Header closeButton>\n                <Title>Details for {fullName} </Title>\n            </Header>\n            <Body>\n     <h1>Comming soon!</h1>\n            </Body>\n            <Footer>\n                <Button variant=\"secondary\" onClick={handleCloseDetail}>\n                    Close\n                </Button>\n\n            </Footer>\n        </Modal>\n    </div>;\n}\n \nexport default Review;","/Users/Gshow/Desktop/Project3/client/src/xsound/core/AudioService.js",["150"],"import {X} from \"xsound\";\n\nconst param={\n    interval: 'auto',\n    shape        : 'rect',\n    width: 1,\n    grid: 'none',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n    // wave: 'rgb(255,31,46)',\n    wave: 'rgb(25,48,255)',\n    // textinterval : 10\n};\n\nclass AudioService {\n\n    audioEventListener;\n\n    start = (pos) => {\n        X('audio').start(pos);\n    };\n\n    stop = () => {\n        X('audio').stop();\n    };\n\n    toggle = () => {\n        X('audio').toggle(X('audio').param('currentTime'));\n    };\n\n    jumpTo = (pos) => {\n        X('audio').param('currentTime', pos);    // The range of value is between 0 and audio duration\n    };\n\n    register=(listener)=>{\n      this.audioEventListener=listener;\n    }\n\n    playRange=(start,end)=>{\n\n        X('audio').start(start, end);\n    };\n\n    canPlay=()=>{\n        return X('audio').isSource();\n    };\n\n    sourcePlay=(start,end)=>{\n        const buffer = X('audio').sprite({ selected : [start, end] });\n        const context = X.get();\n        const source  = context.createBufferSource();\n\n        source.buffer = buffer.selected;\n\n        source.connect(context.destination);\n\n        source.start(0);\n\n    };\n    createTimeAnalyzer=(canvas)=>{\n        const analyzer = X('audio').module('analyser').domain('time');\n        analyzer.setup(canvas).state(true);\n        analyzer.param(param);\n        return analyzer;\n\n    }\n    createFftAnalyzer=(canvas)=>{\n        const analyzer = X('audio').module('analyser').domain('fft');\n        analyzer.setup(canvas).state(true);\n        analyzer.param(param);\n        return analyzer;\n    }\n\n    createOverviewAnalyzer=()=>{\n        return {\n            init: (canvas) => {\n\n                const analyzer = X('audio').module('analyser').domain(\"timeoverview\", 0);\n                // X('audio').param('loop', true);\n                analyzer.setup(canvas).state(true);\n\n                analyzer.param('mode', 'sprite');\n\n                analyzer.drag((event, startTime, endTime) => {\n                    const range={start: startTime, end: endTime};\n                    this.stop();\n                    // overView.setRange(range);\n                    this.audioEventListener.setTimeOverviewRange(range);\n\n                });\n                // new EventOverrides(analyzer, canvas);\n\n                analyzer.param(param);\n            }\n\n        };\n    };\n\n\n    createAnalyzer = () => {\n\n           const analyzer=this.createOverviewAnalyzer();\n            const key=`timeOverview-${new Date().getTime()}`;\n            return analyzer;\n\n    };\n\n    doLoad = (fileName, cb) => {\n\n        console.log(\"X('audio').start\");\n\n        X('audio').resize(16384);\n\n        X('audio').setup({\n            decode: (arrayBuffer) => {\n                // The 1st argument is the instance of `ArrayBuffer`\n                console.log('decode');\n                console.dir(arrayBuffer);\n            },\n            ready: (audioBuffer) => {\n                // The 1st argument is the instance of `AudioBuffer`\n                console.log('ready');\n                this.jumpTo(0);\n                this.audioEventListener.loaded(audioBuffer.duration)\n            },\n            start: (source, currentTime) => {\n                // The 1st argument is the instance of `AudioBufferSourceNode`\n                // The 2nd argument is current time (position) in the played audio\n                console.log('start');\n                console.dir(source);\n                console.dir(currentTime);\n            },\n            stop: (source, currentTime) => {\n                // The 1st argument is the instance of `AudioBufferSourceNode`\n                // The 2nd argument is current time (position) in the played audio\n                console.log('stop');\n                console.dir(source);\n                console.dir(currentTime);\n            },\n            update: (source, currentTime) => {\n                const index = Math.floor(currentTime * source.buffer.sampleRate)\n                const n100msec = 0.100 * source.buffer.sampleRate;\n\n                if ((index % n100msec) !== 0) {\n                    return;\n                }\n\n                // console.log('update');\n                // console.dir(source);\n                // console.dir(currentTime);\n                // cb.progress(currentTime);\n                if (this.ClipCb){\n                    this.ClipCb(currentTime)\n                }\n\n                this.audioEventListener.progress(currentTime);\n\n            },\n            ended: (source, currentTime) => {\n                // The 1st argument is the instance of `AudioBufferSourceNode`\n                // The 2nd argument is current time (position) in audio\n                console.log('ended');\n                console.dir(source);\n                console.dir(currentTime);\n\n                // cb.ended();\n            },\n            error: error => {\n                // The 1st argument is either `Error` or `null`\n                if (error instanceof Error) {\n                    window.alert(error.message);\n                } else {\n                    window.alert('Error : decodeAudioData');\n                }\n            }\n        });\n\n        // this.initAnalyser(canvas);\n        if (cb.createAnalyzers) {\n            cb.createAnalyzers();\n        }\n\n        X.ajax({\n            url: fileName,\n            timeout: 60000,\n            success: (event, arrayBuffer) => {\n                // The 1st argument is `XMLHttpRequestProgressEvent`\n                // The 2nd argument is `ArrayBuffer`[ArrayBuffer -> AudioBuffer]\n\n\n                    X('audio').ready.call(X('audio'), arrayBuffer);\n\n\n            },\n            error: (event, textStatus) => {\n                // The 1st argument is `XMLHttpRequestProgressEvent`\n                // The 2nd argument is either 'error' or 'timeout'\n\n                console.log('error');\n                console.dir(event);\n                console.dir(textStatus);\n            },\n            progress: (event) => {\n                // The 1st argument is `XMLHttpRequestProgressEvent`\n\n                console.log('progress');\n                console.dir(event);\n            }\n        });\n    }\n\n}\n\nexport default AudioService;","/Users/Gshow/Desktop/Project3/client/src/pages/component/top/top.js",["151","152","153"],"import {Link, useHistory} from \"react-router-dom\";\nimport {AnalysisIcon, HomeIcon, ListenIcon, LogoutIcon, ReviewIcon} from \"../../../util/appIcons\";\nimport {Nav, Navbar, Button} from 'react-bootstrap'\nimport {SongLoader} from \"../../../xsound/SongLoader\";\nimport {PlayProgress} from \"../../../xsound/PlayProgress\"\nimport {FFTAnalyze} from \"../../../xsound/analyzers/FFTAnalyze\";\nimport {TimeAnalyze} from \"../../../xsound/analyzers/TimeAnalyze\";\nimport {TimeOverviewAnalyzer} from \"../../../xsound/analyzers/TimeOverviewAnalyzer\";\nimport {Fragment, useContext, useEffect, useState} from \"react\";\nimport {SoundXContext} from \"../../../xsound/AudioProvider\";\nimport {nbSpace} from \"../../../util/Constants\"\n\n// const apiUrl = \"http://localhost:3030\";\nconst apiUrl = \"\";\n\n\nconst Top = (props) => {\n    const history = useHistory();\n    const {audioListener} = useContext(SoundXContext);\n    const [songs, setSongs] = useState(false);\n    const [progress, setProgress] = useState(false);\n    const [top, setsetTop] = useState(-300);\n\n    useEffect(() => {\n        audioListener.showTopNav=showTopNav;\n        return ()=>{\n            audioListener.showTopNav=null;\n        }\n    }, []);\n\n\n    const showTopNav=(songs,progress,timeOverView)=>{\n        setSongs(songs);\n        setProgress(progress);\n        const top=timeOverView?120:-300;\n        setsetTop(top);\n    };\n\n    const logout=()=>{\n        props.setUser(null);\n        setTimeout(()=>{\n            history.go(\"/\")\n\n        })\n    }\n\n    return <div style={{height: 120, backgroundColor: \"rgb(38, 50, 56)\"}}>\n\n\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"/\">BaRs</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    <Link style={{border:\"1px solid lightgray\"}}to=\"/home\" className=\"nav-link\"><HomeIcon/>{nbSpace(1)} Home</Link>\n                    <Link style={{border:\"1px solid lightgray\"}}to=\"/analyze\" className=\"nav-link\"><AnalysisIcon/>{nbSpace(1)} Analyze </Link>\n                    <Link style={{border:\"1px solid lightgray\"}}to=\"/listen\" className=\"nav-link\"> <ListenIcon/> {nbSpace(1)} Listen</Link>\n                    <Link style={{border:\"1px solid lightgray\"}}to=\"review\" className=\"nav-link\"><ReviewIcon/>{nbSpace(1)} Review </Link>\n\n                </Nav>\n                <Nav>\n\n                    <SongLoader apiUrl={apiUrl} show={songs}/>\n\n                </Nav>\n                <Nav>\n                    <Button variant=\"secondary\" size=\"sm\" title={'Logout'} onClick={logout}>Logout</Button>\n                </Nav>\n\n            </Navbar.Collapse>\n        </Navbar>\n\n\n            <ul className=\"timefft\" style={{display:progress?\"\":\"none\"}}>\n                <li><FFTAnalyze key={1} w={80} h={50}/></li>\n                <li><PlayProgress/></li>\n                <li><TimeAnalyze key={2} w={80} h={50}/></li>\n            </ul>\n\n            <div style={{position:\"relative\",top:top,left:0}}>\n                <TimeOverviewAnalyzer apiUrl={\"\"} key={\"analyzer\"} w={800} h={100}/>\n            </div>\n\n\n    </div>\n\n}\n\nexport default Top;","/Users/Gshow/Desktop/Project3/client/src/pages/Authentication/existingUser.jsx",["154","155","156"],"import React, { useRef, useContext } from 'react';\nimport { NavLink, Link } from \"react-router-dom\";\nimport { Form, Row, Col, Button} from 'react-bootstrap';\nimport { UseUserContext } from '../Authentication/Components/userContext';\nimport \"./style.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {SoundXContext} from \"../../xsound/AudioProvider\";\n\nconst ExistingUser = (props) => {\n    console.log(props);\n    const username = useRef();\n    const password = useRef();\n    const [user, dispatch] = UseUserContext();\n\n    const {audioListener} = useContext(SoundXContext);\n\n    const login = () => {\n        \n        let loginObj = {\n            email: username.current.value,\n            password: password.current.value,\n        }\n\n        fetch('/auth/createuser', {\n            method: 'POST',\n            headers: {\n                Accept: \"application/json, text/plain, */*\",\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(loginObj),\n        }).then((response) => response.json())\n            .then((data) => {\n                console.log(data)\n                if(!!Object.keys(data).find(e=> e== \"errors\" || e ==\"err\")) return\n                dispatch({\n                    type: 'loggedInUser',\n                    payload: data,\n                })\n                ////------------------------------------>\n                const user={\n                    firstName:\"\",\n                    lastName:\"\",\n                    userId:data._id\n                };\n                \n                audioListener.user=user;\n                props.setUser(user)\n               \n                ////------------------------------------>\n\n                props.history.push('/home')\n            }).catch((error) => {\n                console.error('Error:', error)\n            })\n    }\n        return (\n            <div className=\"backgroundPic\">\n                <div id=\"title\"></div> \n                <div className=\"auth-body\">\n                    <div className=\"pForm\">\n                        <div id=\"form-background\"></div>\n                        <div id=\"form\">\n                            <Form md={{ span: 6, offset: 3 }}>\n                                <Row>\n                                    <Col md={{ span: 4, offset: 4 }}>\n                                        <Form.Group controlId=\"formBasicEmail\">\n                                            <Form.Label>User Name</Form.Label>\n                                            <Form.Control ref={username} type=\"email\" placeholder=\"login@email.com\" />\n                                        </Form.Group>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={{ span: 4, offset: 4 }}>\n                                        <Form.Group controlId=\"formPassword\">\n                                            <Form.Label>Password</Form.Label>\n                                            <Form.Control ref={password} type=\"email\" placeholder=\"Password\" />\n                                        </Form.Group>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={{ span: 4, offset: 4 }}>\n                                        <Button onClick={login}> Login </Button>\n                                    </Col>\n                                </Row>\n                                <Row>\n                                    <Col md={{ span: 4, offset: 4 }}>\n                                        <NavLink to=\"/NewUser\" activeClassName=\"active\"> Create new account. </NavLink>\n                                    </Col>\n                                </Row>\n                            </Form>  \n                        </div>\n                    </div>\n                    <Link to=\"/home\"> Home </Link>\n                </div>\n            </div>\n        );\n    \n}\n\nexport default ExistingUser;\n\n\n\n\n\n","/Users/Gshow/Desktop/Project3/client/src/xsound/TechniqueManager.js",["157","158","159","160"],"\nimport React, {useContext,useState,useEffect} from 'react';\nimport {ClipContainer} from \"./clips/ClipContainer\";\nimport {AddClipIcon} from \"../util/appIcons\";\nimport {SoundXContext} from \"./AudioProvider\";\nimport {containerBGs, TECHNIQUE_IMAGERY, TECHNIQUE_METAPHOR, TECHNIQUE_PUNCH_LINE} from \"../util/Constants\";\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Media from 'react-bootstrap/Media';\nimport Card from 'react-bootstrap/Card';\nimport CardColumns from 'react-bootstrap/CardColumns'\n\n\nexport const TechniqueManager=(props) =>{\n    const [show, setShow] = useState(false);\n    const { audioListener} = useContext(SoundXContext);\n\n    useEffect(() => {\n        audioListener.techniqueManager={loaded};\n        return () => {\n            audioListener.techniqueManager=null;\n        };\n    }, []);\n\n    const loaded=()=>{\n        setShow(true)\n        const songId=audioListener.selectedSongId;\n        const userId=audioListener.user.userId;\n\n        fetch(`/audio/loadclips/${userId}/${songId}`).then((resp)=>{\n            if (resp.ok){\n                return resp.json();\n            }else{\n                alert(\"Cannot load User clip list\")\n            }\n        }).then((data)=>{\n\n            audioListener.loadClipList(data);\n\n        })\n    }\n    const addClip = (technique) => {\n        audioListener.addClipToTechnique(technique)\n    };\n    const AddClipButton = (props) => {\n        const {technique}=props;\n        return <div\n            onClick={() => addClip(technique)}\n            style={{background: containerBGs[technique],cursor:\"pointer\"}}>\n            <span><AddClipIcon/> Add to {technique}</span>\n        </div>\n    }\n    return (\n        <div style={{justifyContent: \"space-evenly\"}}>\n            { show &&\n                <div style={{justifyContent: \"space-evenly\"}}>\n                    <CardColumns>\n                        <Card bg=\"dark\" text=\"light\" border=\"light\" style={{height: \"30rem\", boxShadow: \"10px 5px 15px black\"}}>\n                            <Card.Header className={\"technique\"}><AddClipButton key={1} technique={TECHNIQUE_METAPHOR}/></Card.Header>\n                            <Card.Body style={{height: \"20rem\"}}>\n                                <ClipContainer technique={TECHNIQUE_METAPHOR} max={4}/>\n                            </Card.Body>\n                        </Card>\n                        <Card bg=\"dark\" text=\"light\" border=\"light\" style={{height: \"30rem\", boxShadow: \"10px 5px 15px black\"}}>\n                            <Card.Header className={\"technique\"}><AddClipButton key={2} technique={TECHNIQUE_PUNCH_LINE}/></Card.Header>\n                            <Card.Body style={{height: \"20rem\"}}>\n                                <ClipContainer technique={TECHNIQUE_PUNCH_LINE} max={2}/>\n                            </Card.Body>\n                        </Card>\n                        <Card bg=\"dark\" text=\"light\" border=\"light\" style={{height: \"30rem\" , boxShadow: \"10px 5px 15px black\"}}>\n                            <Card.Header className={\"technique\"}><AddClipButton key={3} technique={TECHNIQUE_IMAGERY}/></Card.Header>\n                            <Card.Body style={{height: \"20rem\"}}>\n                                <ClipContainer technique={TECHNIQUE_IMAGERY} max={3}/>\n                            </Card.Body>\n                        </Card>\n                    </CardColumns>\n                </div>\n            }\n        </div>\n    );\n};","/Users/Gshow/Desktop/Project3/client/src/util/Constants.js",[],"/Users/Gshow/Desktop/Project3/client/src/util/appIcons.js",[],"/Users/Gshow/Desktop/Project3/client/src/xsound/SongLoader.js",["161"],"\nimport React, {useContext, useEffect, useState} from 'react';\nimport {PlayListsIcon} from \"../util/appIcons\";\nimport {SoundXContext} from \"./AudioProvider\";\n\nexport function SongLoader(props) {\n    const {audio,audioListener} = useContext(SoundXContext);\n\n    const [songlist, setSonglist] = useState([]);\n    const [selectedSong, setSelectedSong] = useState(-1);\n    const {apiUrl,show}=props;\n\n    useEffect(() => {\n        audioListener.songLoader={loadSong};\n\n        const loadPlaylist = async () => {\n\n            try {\n                const resp = await fetch(`${apiUrl}/audio/playlist`);\n                if (resp.ok) {\n                    const songlist = await resp.json();\n                    setSonglist(songlist);\n                    if (songlist.length>0) {\n                        loadSong(songlist[0].id);\n                        audioListener.songList=songlist\n                    }\n                }\n            } catch (e) {\n                alert(`problem loading songs: \"${e.message}\"`)\n            }\n        };\n        loadPlaylist();\n\n    }, []);\n\n\n    const songSelected = (e) => {\n        loadSong(e.target.value)\n    };\n\n    const loadSong = (songId) => {\n        console.log(`songId ${songId}`);\n        if (audio){\n            audio.stop()\n        };\n        setSelectedSong(songId)\n        audioListener.selectedSongId=songId;\n        if (audioListener.timeOverviewAnalyzer.loadSong) {\n            audioListener.timeOverviewAnalyzer.loadSong(songId);\n        }\n    };\n\n    return (\n        <>\n            { show &&\n                <div style={{textAlign: \"left\", padding: 10}}>\n                    <PlayListsIcon/>\n                    <select onChange={songSelected} value={selectedSong}>\n                        {\n                            songlist.map((itm, idx) => {\n                                return <option key={idx} value={itm.id}>\n                                    {itm.title} {\"  ----  \"} [{itm.artists}]\n                                </option>\n                            })\n                        }\n\n                    </select>\n                </div>\n            }\n            </>\n    );\n};","/Users/Gshow/Desktop/Project3/client/src/xsound/PlayProgress.js",["162"],"import React, { Component, useState } from 'react';\nimport { AnimatePauseIcon, AnimatePlayIcon } from \"../util/appIcons\";\nimport { SoundXContext } from \"./AudioProvider\";\nimport { round } from \"./analyzers/TimeOverviewAnalyzer\";\nimport {nbSpace} from \"../util/Constants\"\n\nexport class PlayProgress extends Component {\n    static contextType = SoundXContext;\n\n    state = {\n        pos: 0,\n        playing: false,\n        max: 0,\n        show: false\n    };\n\n    // const [pos, setPos] = useState(0);\n    componentDidMount() {\n        this.context.audioListener.progressX = this;\n    }\n\n    componentWillUnmount() {\n        this.context.audioListener.progressX = null;\n    }\n\n    toggle = () => {\n        this.context.audio.toggle();\n        const playing = !this.state.playing;\n        this.setState({ playing });\n\n    };\n    stop = (pos) => {\n        this.context.audio.stop()\n    };\n\n    progress = (pos) => {\n        this.setState({ pos });\n    };\n\n    changed = (e) => {\n        const pos = e.target.value;\n        this.setState({ pos });\n        this.context.audio.jumpTo(pos);\n    };\n\n    loaded = (duration) => {\n        this.setState({ max: duration });\n        this.setState({ show: true })\n    }\n\n    render() {\n        const { max, pos, show, playing } = this.state;\n        const posMin = round(pos / 60, 2);\n        const endMin = round(max / 60, 2);\n        return (\n            <div>\n                {show &&\n                    <div>\n\n                        <span onClick={this.toggle}>\n                            {playing ? <AnimatePauseIcon /> : <AnimatePlayIcon />}\n                            {nbSpace(2)}\n                            <span style={{ fontSize: 12 }}>{posMin}</span>\n                            {nbSpace(2)}\n                            <input onChange={this.changed}\n                                type={\"range\"}\n                                min={0}\n                                max={max}\n                                value={pos}\n                                style={{ width: 700 }}\n                            /> {endMin}\n                        </span>\n                    </div>\n                }\n            </div>\n        );\n    }\n\n}\n\n","/Users/Gshow/Desktop/Project3/client/src/xsound/analyzers/FFTAnalyze.jsx",[],"/Users/Gshow/Desktop/Project3/client/src/xsound/analyzers/TimeAnalyze.jsx",[],"/Users/Gshow/Desktop/Project3/client/src/xsound/analyzers/TimeOverviewAnalyzer.jsx",[],"/Users/Gshow/Desktop/Project3/client/src/xsound/clips/ClipContainer.jsx",["163"],"import React, {Component} from 'react';\nimport {AudioClip} from \"./AudioClip\";\nimport {SoundXContext} from \"../AudioProvider\";\nimport {containerBGs} from \"../../util/Constants\";\n\n\nexport class ClipContainer extends Component {\n    static contextType = SoundXContext;\n\n    state = {\n        clipList: []\n    };\n\n    componentDidMount() {\n        const {technique} = this.props;\n        this.context.audioListener.registerTechnique(technique, this);\n    }\n\n    addClip = () => {\n        if (this.state.clipList.length<this.props.max) {\n            const range = this.context.audioListener.timeOverviewRange;\n            if(range) {\n                const secs = Math.floor(range.end - range.start);\n                if ( secs > 10) {\n                    const clipNum = new Date().getTime();\n                    const score=1;\n                    const clipList = [...this.state.clipList, {clipNum,score, ...range}];\n                    this.setState({clipList});\n                } else {\n                    alert(`Selected clips of ${secs} is less than 10secs`)\n\n                }\n            }\n\n        }else{\n            alert(`Cannot exceeded max clips of ${this.props.max}`)\n        }\n    };\n\n\n    deleteClip = (clipNum) => {\n        const clipList = this.state.clipList.filter((itm) => itm.clipNum !== clipNum);\n        this.setState({clipList});\n    };\n\n    clearClips=()=>{\n        const clipList=[];\n        this.setState({clipList});\n    }\n\n    loadClips=(clipList)=>{\n        this.setState({clipList});\n    };\n\n    updateScore=( clipNum,score)=>{\n        const clipList=this.state.clipList;\n        clipList.forEach((itm)=>{\n            if (itm. clipNum=== clipNum){\n                itm.score=score;\n            }\n        });\n        this.setState({clipList})\n    }\n    render() {\n        const {clipList} = this.state;\n        const {technique} = this.props;\n\n        return <>\n            {clipList && clipList.length > 0 &&\n\n                clipList.map((clip, idx) => {\n                    return  <div className={\"clip-container\"} style={{background: containerBGs[technique]}}>\n                                <AudioClip key={clip.id}\n                                    id={clip.id}\n                                    start={clip.start}\n                                    end={clip.end}\n                                    score={clip.score}\n                                    onDelete={() => this.deleteClip(clip.id)}\n                                    updateScore={this.updateScore}\n                                />\n                                <br />\n                            </div>\n                })\n            }\n        </>\n    }\n\n}","/Users/Gshow/Desktop/Project3/client/src/xsound/clips/AudioClip.jsx",["164","165","166","167","168"],"import React, {Component} from 'react';\nimport _ from 'lodash'\nimport {AnimatePauseIcon, AnimatePlayIcon, DeleteClipIcon} from \"../../util/appIcons\";\nimport {SoundXContext} from \"../AudioProvider\";\n\nexport class AudioClip extends Component {\n    static contextType = SoundXContext;\n\n    state = {\n        playing: false,\n        posValue: 0,\n         clipNum:this.props. clipNum,\n        start:this.props.start,\n        end:this.props.end,\n        currentPos:this.props.start,\n        score:this.props.score,\n    };\n    componentDidMount() {\n        this.context.audioListener.registerClip(this);\n    }\n    componentWillUnmount() {\n        this.stop();\n        this.context.audioListener.unregisterClip(this);\n    }\n\n    deleteClip=()=>{\n        this.props.onDelete(this.props. clipNum);\n    }\n\n    progress=(pos)=>{\n        const {audio}=this.context;\n        const {start,end,currentPos}=this.state;\n        const posValue=pos - Math.floor(start);\n        this.setState({posValue,\n            currentPos:pos\n        });\n        if (pos >= end) {\n            this.setState({posValue:0});\n            audio.jumpTo(start)\n        }\n    };\n\n    stop=()=>{\n        if (this.state.playing) {\n            this.setState({playing: false});\n            const {audio} = this.context;\n            audio.stop();\n        }\n    }\n\n    toggle = () => {\n        const {audio}=this.context;\n        const { clipNum,playing,currentPos}=this.state;\n        if (!playing){\n            this.context.audioListener.requestFocus( clipNum);\n            audio.jumpTo(currentPos)\n        }\n        audio.toggle();\n        this.setState({playing:!playing});\n\n    };\n\n    getId=()=>{\n        return this.state. clipNum;\n    };\n\n    updateScore=(e)=>{\n        const score=parseInt(e.target.value);\n        this.setState({score})\n        this.props.updateScore(this.props. clipNum,score)\n    }\n    render() {\n\n        const {playing,posValue,start,end,score}=this.state;\n        const playMap = _.range(Math.floor(start), Math.floor(end) + 1);\n        const max = playMap.length;\n        const w = 140;//max * 11;\n\n\n        const changed = (e) => {\n            // props.changed(e.target.value);\n            console.log(e.target.value);\n        }\n\n\n\n        return (\n            <div className={\"audio-clip\"} style={{width:w}}>\n                <span><span onClick={this.toggle}>{playing ? <AnimatePauseIcon /> : <AnimatePlayIcon />}</span>\n                <input onChange={changed}\n                       type={\"range\"}\n                       min={0}\n                       max={max}\n                       value={posValue}\n                       style={{width: \"40%\"}}\n                />\n                <DeleteClipIcon onClick={this.deleteClip}/>\n                <input type=\"number\"  value={score} min=\"1\" max=\"10\"\n                    style={{height:20,width:40}}\n                       onChange={this.updateScore}\n                />\n\n                </span>\n            </div>\n        );\n    }\n    toString=()=>{\n\n        return this.getId();\n    };\n\n\n};","/Users/Gshow/Desktop/Project3/client/src/pages/listenAnimations.js",[],"/Users/Gshow/Desktop/Project3/client/src/pages/component/footer/footer.js",[],"/Users/Gshow/Desktop/Project3/client/src/pages/landingPage.js",["169"],{"ruleId":"170","severity":1,"message":"171","line":4,"column":8,"nodeType":"172","messageId":"173","endLine":4,"endColumn":12},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"170","severity":1,"message":"178","line":2,"column":35,"nodeType":"172","messageId":"173","endLine":2,"endColumn":39},{"ruleId":"170","severity":1,"message":"179","line":8,"column":8,"nodeType":"172","messageId":"173","endLine":8,"endColumn":21},{"ruleId":"170","severity":1,"message":"180","line":13,"column":12,"nodeType":"172","messageId":"173","endLine":13,"endColumn":16},{"ruleId":"181","severity":1,"message":"182","line":5,"column":30,"nodeType":"183","messageId":"184","endLine":11,"endColumn":10},{"ruleId":"170","severity":1,"message":"185","line":6,"column":16,"nodeType":"172","messageId":"173","endLine":6,"endColumn":24},{"ruleId":"170","severity":1,"message":"186","line":11,"column":11,"nodeType":"172","messageId":"173","endLine":11,"endColumn":20},{"ruleId":"170","severity":1,"message":"187","line":12,"column":11,"nodeType":"172","messageId":"173","endLine":12,"endColumn":19},{"ruleId":"170","severity":1,"message":"188","line":110,"column":21,"nodeType":"172","messageId":"173","endLine":110,"endColumn":24},{"ruleId":"170","severity":1,"message":"178","line":1,"column":10,"nodeType":"172","messageId":"173","endLine":1,"endColumn":14},{"ruleId":"170","severity":1,"message":"189","line":7,"column":8,"nodeType":"172","messageId":"173","endLine":7,"endColumn":11},{"ruleId":"190","severity":1,"message":"191","line":17,"column":8,"nodeType":"192","endLine":17,"endColumn":10,"suggestions":"193"},{"ruleId":"170","severity":1,"message":"194","line":18,"column":11,"nodeType":"172","messageId":"173","endLine":18,"endColumn":21},{"ruleId":"190","severity":1,"message":"191","line":13,"column":8,"nodeType":"192","endLine":13,"endColumn":10,"suggestions":"195"},{"ruleId":"190","severity":1,"message":"191","line":39,"column":8,"nodeType":"192","endLine":39,"endColumn":10,"suggestions":"196"},{"ruleId":"170","severity":1,"message":"188","line":105,"column":19,"nodeType":"172","messageId":"173","endLine":105,"endColumn":22},{"ruleId":"170","severity":1,"message":"197","line":2,"column":45,"nodeType":"172","messageId":"173","endLine":2,"endColumn":55},{"ruleId":"170","severity":1,"message":"198","line":9,"column":9,"nodeType":"172","messageId":"173","endLine":9,"endColumn":17},{"ruleId":"190","severity":1,"message":"191","line":29,"column":8,"nodeType":"192","endLine":29,"endColumn":10,"suggestions":"199"},{"ruleId":"170","severity":1,"message":"180","line":13,"column":12,"nodeType":"172","messageId":"173","endLine":13,"endColumn":16},{"ruleId":"200","severity":1,"message":"201","line":34,"column":50,"nodeType":"202","messageId":"203","endLine":34,"endColumn":52},{"ruleId":"200","severity":1,"message":"201","line":34,"column":67,"nodeType":"202","messageId":"203","endLine":34,"endColumn":69},{"ruleId":"170","severity":1,"message":"189","line":7,"column":8,"nodeType":"172","messageId":"173","endLine":7,"endColumn":11},{"ruleId":"170","severity":1,"message":"204","line":8,"column":8,"nodeType":"172","messageId":"173","endLine":8,"endColumn":11},{"ruleId":"170","severity":1,"message":"205","line":9,"column":8,"nodeType":"172","messageId":"173","endLine":9,"endColumn":13},{"ruleId":"190","severity":1,"message":"206","line":23,"column":8,"nodeType":"192","endLine":23,"endColumn":10,"suggestions":"207"},{"ruleId":"190","severity":1,"message":"208","line":34,"column":8,"nodeType":"192","endLine":34,"endColumn":10,"suggestions":"209"},{"ruleId":"170","severity":1,"message":"210","line":1,"column":28,"nodeType":"172","messageId":"173","endLine":1,"endColumn":36},{"ruleId":"211","severity":1,"message":"212","line":58,"column":17,"nodeType":"213","messageId":"214","endLine":58,"endColumn":29,"fix":"215"},{"ruleId":"211","severity":1,"message":"212","line":12,"column":18,"nodeType":"213","messageId":"214","endLine":12,"endColumn":37,"fix":"216"},{"ruleId":"211","severity":1,"message":"212","line":27,"column":29,"nodeType":"213","messageId":"214","endLine":27,"endColumn":48,"fix":"217"},{"ruleId":"170","severity":1,"message":"218","line":32,"column":26,"nodeType":"172","messageId":"173","endLine":32,"endColumn":36},{"ruleId":"211","severity":1,"message":"212","line":64,"column":16,"nodeType":"213","messageId":"214","endLine":64,"endColumn":35,"fix":"219"},{"ruleId":"211","severity":1,"message":"212","line":70,"column":32,"nodeType":"213","messageId":"214","endLine":70,"endColumn":51,"fix":"220"},{"ruleId":"190","severity":1,"message":"191","line":12,"column":8,"nodeType":"192","endLine":12,"endColumn":10,"suggestions":"221"},"no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","no-native-reassign",["222"],"no-negated-in-lhs",["223"],"'Link' is defined but never used.","'AudioProvider' is defined but never used.","'user' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'dispatch' is assigned a value but never used.","'firstName' is assigned a value but never used.","'lastName' is assigned a value but never used.","'key' is assigned a value but never used.","'Col' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'audioListener'. Either include it or remove the dependency array.","ArrayExpression",["224"],"'clearClips' is assigned a value but never used.",["225"],["226"],"'LogoutIcon' is defined but never used.","'Fragment' is defined but never used.",["227"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Row' is defined but never used.","'Media' is defined but never used.","React Hook useEffect has missing dependencies: 'audioListener' and 'loaded'. Either include them or remove the dependency array.",["228"],"React Hook useEffect has missing dependencies: 'apiUrl', 'audioListener', and 'loadSong'. Either include them or remove the dependency array.",["229"],"'useState' is defined but never used.","no-whitespace-before-property","Unexpected whitespace before property clipNum.","MemberExpression","unexpectedWhitespace",{"range":"230","text":"231"},{"range":"232","text":"231"},{"range":"233","text":"231"},"'currentPos' is assigned a value but never used.",{"range":"234","text":"231"},{"range":"235","text":"231"},["236"],"no-global-assign","no-unsafe-negation",{"desc":"237","fix":"238"},{"desc":"237","fix":"239"},{"desc":"237","fix":"240"},{"desc":"237","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},[1652,1654],".",[369,371],[776,778],[1681,1683],[1841,1843],{"desc":"237","fix":"246"},"Update the dependencies array to be: [audioListener]",{"range":"247","text":"248"},{"range":"249","text":"248"},{"range":"250","text":"248"},{"range":"251","text":"248"},"Update the dependencies array to be: [audioListener, loaded]",{"range":"252","text":"253"},"Update the dependencies array to be: [apiUrl, audioListener, loadSong]",{"range":"254","text":"255"},{"range":"256","text":"248"},[571,573],"[audioListener]",[387,389],[1352,1354],[1179,1181],[839,841],"[audioListener, loaded]",[1064,1066],"[apiUrl, audioListener, loadSong]",[310,312]]